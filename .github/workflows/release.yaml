name: Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      package_name: ${{ steps.get-name.outputs.package_name }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Fetch depth 2 to compare with previous commit

      - name: Get package name from Cargo.toml
        id: get-name
        run: |
          PACKAGE_NAME=$(awk -F'=' '/^name\s*=/ { gsub(/^[[:space:]]*"|"|[[:space:]]*$/, "", $2); print $2; exit }' Cargo.toml)
          if [ -z "$PACKAGE_NAME" ]; then
            echo "Error: Package name not found in Cargo.toml"
            exit 1
          fi
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "Package name: $PACKAGE_NAME"

      - name: Check if Cargo.toml version changed
        id: check
        run: |
          CURRENT_VERSION=$(awk -F'=' '/^version\s*=/ { gsub(/^[[:space:]]*"|"|[[:space:]]*$/, "", $2); print $2; exit }' Cargo.toml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Current version not found in Cargo.toml"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "version=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi

          git checkout HEAD^1
          PREVIOUS_VERSION=$(awk -F'=' '/^version\s*=/ { gsub(/^[[:space:]]*"|"|[[:space:]]*$/, "", $2); print $2; exit }' Cargo.toml)
          git checkout HEAD # Go back to the current commit

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed: $PREVIOUS_VERSION -> $CURRENT_VERSION. Will create release."
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION. No release needed."
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true' # Only run if the version check determined a release is needed
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need contents: write for creating/uploading to releases
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }} # Use the version determined in the check-version job
          name: Release v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          # body: Add release notes here based on commit messages if needed
          # files: Optional: Specify files to include initially, though matrix builds upload later

  build-release:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true' # Only run if the version check determined a release is needed
    permissions:
      contents: write # Need contents: write to upload assets to the release created in create-release
    strategy:
      fail-fast: false # Continue with other builds if one platform build fails
      matrix:
        include:
          # Standard platforms (dynamically linked)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_path: target/x86_64-unknown-linux-gnu/release
            asset_suffix: -linux-x86_64

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_path: target/x86_64-pc-windows-msvc/release
            asset_suffix: -windows-x86_64.exe
            extension: .exe # Needed for Windows executables
          - os: windows-latest
            target: i686-pc-windows-msvc
            bin_path: target/i686-pc-windows-msvc/release
            asset_suffix: -windows-i686.exe
            extension: .exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            bin_path: target/aarch64-pc-windows-msvc/release
            asset_suffix: -windows-arm64.exe
            extension: .exe

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_path: target/x86_64-apple-darwin/release
            asset_suffix: -macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_path: target/aarch64-apple-darwin/release
            asset_suffix: -macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true # Ensure this toolchain is used

      # Install dependencies for macOS (OpenSSL and Protobuf)
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install openssl@1.1 protobuf@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
          brew link --force protobuf@3
          echo "PATH=$(brew --prefix protobuf@3)/bin:$PATH" >> $GITHUB_ENV
          protoc --version # Verify protoc is available

      # Install dependencies for Linux (OpenSSL and Protobuf)
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libprotobuf-dev

      - name: Build release binary
        uses: actions-rs/cargo@v1
        env:
          RUST_BACKTRACE: 1 # Enable backtraces for easier debugging
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Set binary path and asset name variables
        shell: bash # Use bash for consistent scripting syntax
        run: |
          PACKAGE_NAME="${{ needs.check-version.outputs.package_name }}"
          VERSION="${{ needs.check-version.outputs.version }}" # Optional, useful for debug

          # Construct the full path to the built binary
          BINARY_EXTENSION="${{ matrix.extension || '' }}" # Use default extension if matrix.extension is not set
          BINARY_PATH="${{ matrix.bin_path }}/${PACKAGE_NAME}${BINARY_EXTENSION}"

          # Construct the final asset name for the release
          ASSET_FINAL_NAME="${PACKAGE_NAME}${matrix.asset_suffix}"

          echo "BINARY_PATH=${BINARY_PATH}" >> $GITHUB_ENV
          echo "ASSET_FINAL_NAME=${ASSET_FINAL_NAME}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV # Keep package name in env for debug/SHA step

          # Debug info
          echo "Debug info:"
          echo "- Package name: ${PACKAGE_NAME}"
          echo "- Version: ${VERSION}"
          echo "- Target: ${{ matrix.target }}"
          echo "- Binary path (resolved): ${BINARY_PATH}"
          echo "- Asset name (resolved): ${ASSET_FINAL_NAME}"

          # Verify binary exists BEFORE trying to generate SHA or upload
          if [ -f "${BINARY_PATH}" ]; then
              echo "✅ Binary exists at: ${BINARY_PATH}"
              ls -la "${BINARY_PATH}"
          else
              echo "❌ Binary NOT found at: ${BINARY_PATH}"
              echo "Contents of target directory:"
              find target -type f -name "${PACKAGE_NAME}*" -print || true # find command might fail if target dir doesn't exist
              ls -R target || true # List all files in target directory
              exit 1 # Fail the step if the binary isn't found
          fi

      - name: Generate SHA256 sum
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            sha256sum "$BINARY_PATH" > "$BINARY_PATH.sha256"
          else
            # Use sha256sum which is standard on Linux and available via brew on macOS
            sha256sum "$BINARY_PATH" > "$BINARY_PATH.sha256"
          fi
          echo "Generated SHA256 file: ${BINARY_PATH}.sha256"
          cat "$BINARY_PATH.sha256" # Print content for verification

      - name: Upload Binary Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }} # Use the default GITHUB_TOKEN
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }} # Use the variable set earlier
          asset_name: ${{ env.ASSET_FINAL_NAME }} # Use the variable set earlier
          asset_content_type: application/octet-stream

      - name: Upload SHA256 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}.sha256 # Path to the generated SHA256 file
          asset_name: ${{ env.ASSET_FINAL_NAME }}.sha256 # Asset name for the SHA256 file
          asset_content_type: text/plain


  cross-builds:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true' # Only run if the version check determined a release is needed
    runs-on: ubuntu-latest # Cross builds typically run on Linux
    permissions:
      contents: write # Need contents: write to upload assets to the release
    strategy:
      fail-fast: false # Continue with other cross builds if one fails
      matrix:
        include:
          # Static Linux build (musl)
          - target: x86_64-unknown-linux-musl
            asset_suffix: -linux-x86_64-static
            openssl_arch: amd64 # Architecture needed for libssl-dev in cross container

          # ARM64 Linux (gnu)
          - target: aarch64-unknown-linux-gnu
            asset_suffix: -linux-arm64
            openssl_arch: arm64

          # ARM64 static Linux (musl)
          - target: aarch64-unknown-linux-musl
            asset_suffix: -linux-arm64-static
            openssl_arch: arm64

          # 32-bit Linux (gnu)
          - target: i686-unknown-linux-gnu
            asset_suffix: -linux-i686
            openssl_arch: i386

          # 32-bit static Linux (musl)
          - target: i686-unknown-linux-musl
            asset_suffix: -linux-i686-static
            openssl_arch: i386

          # ARMv7 (32-bit ARM for Raspberry Pi) (gnueabihf)
          - target: armv7-unknown-linux-gnueabihf
            asset_suffix: -linux-armv7
            openssl_arch: armhf

          # ARMv7 static (musleabihf)
          - target: armv7-unknown-linux-musleabihf
            asset_suffix: -linux-armv7-static
            openssl_arch: armhf

          # WebAssembly (doesn't use cross, handled separately)
          - target: wasm32-unknown-unknown
            asset_suffix: .wasm
            extension: .wasm
            no_openssl: true # No OpenSSL needed for this target

    steps:
      - uses: actions/checkout@v3

      # Install Rust toolchain for the runner's architecture and specified targets
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }} # Install the specific cross-compilation target
          override: true

      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --force # Install cross from git

      - name: Set variables for cross-build
        shell: bash
        run: |
          PACKAGE_NAME="${{ needs.check-version.outputs.package_name }}"
          VERSION="${{ needs.check-version.outputs.version }}" # Optional

          # Cross places builds in target/<target>/release/
          BINARY_EXTENSION="${{ matrix.extension || '' }}" # Use default extension if matrix.extension is not set
          BINARY_PATH="target/${{ matrix.target }}/release/${PACKAGE_NAME}${BINARY_EXTENSION}"

          # Construct the final asset name
          ASSET_FINAL_NAME="${PACKAGE_NAME}${matrix.asset_suffix}"

          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          echo "BINARY_PATH=${BINARY_PATH}" >> $GITHUB_ENV
          echo "ASSET_FINAL_NAME=${ASSET_FINAL_NAME}" >> $GITHUB_ENV

          echo "Cross-build variables:"
          echo "- Package: ${PACKAGE_NAME}"
          echo "- Version: ${VERSION}"
          echo "- Target: ${{ matrix.target }}"
          echo "- Binary Path (resolved): ${BINARY_PATH}"
          echo "- Asset Name (resolved): ${ASSET_FINAL_NAME}"

      # Create Cross.toml with pre-build commands for OpenSSL (if needed for this target)
      - name: Configure cross for OpenSSL dependency
        if: ${{ !matrix.no_openssl }} # Skip for targets like WASM
        run: |
          echo "Creating Cross.toml for target ${{ matrix.target }}..."
          cat > Cross.toml << EOF
          [target.${{ matrix.target }}]
          pre-build = [
              "dpkg --add-architecture ${{ matrix.openssl_arch }}", # Add necessary architecture within the cross container
              "apt-get update",
              "apt-get install -y libssl-dev:${{ matrix.openssl_arch }}" # Install libssl-dev
              # Add other dependencies needed for cross-compilation here if any
          ]
          EOF
          echo "Cross.toml content:"
          cat Cross.toml

      # Special build step for WebAssembly (not using cross)
      - name: Build WebAssembly target
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          echo "Building WASM target: ${{ matrix.target }}"
          cargo build --release --target wasm32-unknown-unknown
          echo "WASM build finished."

      # Build using cross for other targets
      - name: Build with cross
        if: matrix.target != 'wasm32-unknown-unknown' # Skip WASM target as it's built separately
        run: |
          echo "Building target with cross: ${{ matrix.target }}"
          cross build --release --target ${{ matrix.target }}
          echo "Cross build finished."

      - name: Verify binary exists after build
        shell: bash
        run: |
           if [ -f "${BINARY_PATH}" ]; then
               echo "✅ Binary exists at: ${BINARY_PATH}"
               ls -la "${BINARY_PATH}"
           else
               echo "❌ Binary NOT found at: ${BINARY_PATH}"
               echo "Contents of target release directory for this target:"
               ls -R "target/${{ matrix.target }}/release/" || true
               find target -type f -name "${PACKAGE_NAME}*" -print || true # Search more broadly just in case
               exit 1 # Fail the step if the binary isn't found
           fi

      - name: Generate SHA256 sum
        shell: bash
        run: |
          # Use sha256sum as runner is always Ubuntu
          sha256sum "$BINARY_PATH" > "$BINARY_PATH.sha256"
          echo "Generated SHA256 file: ${BINARY_PATH}.sha256"
          cat "$BINARY_PATH.sha256" # Print content for verification

      - name: Upload Binary Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default GITHUB_TOKEN
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }} # Use the variable set earlier
          asset_name: ${{ env.ASSET_FINAL_NAME }} # Use the variable set earlier
          asset_content_type: application/octet-stream

      - name: Upload SHA256 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}.sha256 # Path to the generated SHA256 file
          asset_name: ${{ env.ASSET_FINAL_NAME }}.sha256 # Asset name for the SHA256 file
          asset_content_type: text/plain
